import java.util.Arrays;
import java.io.*;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
//import org.apache.hadoop.io.FloatWritable;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;


public class NYSE1 {
	
	public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
	   {
	      public void map(LongWritable key, Text values, Context context)
	      {	    	  
	         try{
                         
	            String[] str = values.toString().split(",");	 
	           
float f =Float.parseFloat(str[3]);
float f1 =Float.parseFloat(str[4]);
float f2=Float.parseFloat(str[5]);
float f3=Float.parseFloat(str[6]);
float f4 =Float.parseFloat(str[8]);
float a[]={f,f1,f2,f3,f4};
Arrays.sort(a);
float min=a[0];
float a1=a.length-1;
float max=a1;
String smin=Float.toString(min);
String smax=Float.toString(max);
String data= smin+","+smax;

	            context.write(new Text(str[1]),new Text(data));
	            
	         }
	         catch(Exception e)
	         {
	            System.out.println(e.getMessage());
	         }
	      }
	   }
	
	 public static class ReduceClass extends Reducer<Text,Text,Text,Text>
	   {
		 private Text result = new Text();
		    
		    public void reduce(Text key, Iterable<Text> values,Context context) throws IOException, InterruptedException {
		     
				
		         for (Text variable : values)
		         {
		        	 String[] str1 = variable.toString().split(",");	
                    float amin =Float.parseFloat(str1[0]);  
                    float amax =Float.parseFloat(str1[1]);
                    float variance =((amax-amin)/amin*100);
                    String v1=Float.toString(variance);
                   result.set(v1);
                               
		        	      
		         }
		         
		         
		     		      
		      context.write(key,result);
		      
		    }
	   }
	  public static void main(String[] args) throws Exception {
		    Configuration conf = new Configuration();
		   
		    
		    Job job = Job.getInstance(conf, "Volume Count");
		   job.setJarByClass(NYSE1.class);
		    job.setMapperClass(MapClass.class);
		  
		    
		   job.setReducerClass(ReduceClass.class);
		   
		    job.setOutputKeyClass(Text.class);
		    job.setOutputValueClass(Text.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
		  }
}
